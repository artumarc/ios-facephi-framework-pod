//
//  UserPhotographWorker.swift
//  FWFaceAuth
//
//  Created by Grecia Escárcega on 06/12/19.
//  Copyright (c) 2019 Grecia Escárcega. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FPhiWidgetSelphi
import os.log

protocol SelphiWorkerDelegate {
    func returnData(selphiResult: SelphiModel.Response.SelphiResult)
}

class SelphiWorker: FPhiWidgetProtocol {
    
    var delegate: SelphiWorkerDelegate?
    
    var selphiWidget: SelphiWidget?
    
    init(delegate: SelphiWorkerDelegate) {
        self.delegate = delegate
    }
    
    func matcherSoapDummy() -> String {
        switch Int.random(in: 0...2) {
        case 0:
            return "FALSE"
        case 1:
            return "TRUE"
        case 2:
            return "BACK"
        default:
            return "ERROR"
        }
    }
    
    func profuturoServiceDummy() -> Bool{
        return Bool.random()
    }
    
    func showSelphIdWidget(liveness: FPhiWidgetLivenessMode, extraction: FPhiWidgetExtractionMode, viewController: SelphiViewController) {
        
        let thisBundle = Util.getBundle()
        
        do {
            self.selphiWidget = try SelphiWidget(frontCameraIfAvailable: true, resources: thisBundle.path(forResource: "SelphiLive-1.2", ofType: "zip"), delegate: self)
        } catch {
            print("Selphi widget error")
            return
        }


        guard let widget = self.selphiWidget else { return }
        widget.extractionMode = extraction
        widget.livenessMode = liveness
        // widget.cropImagesToFace = false
        widget.startExtraction()
        widget.tutorialFlag = true
        
        viewController.isStatusBarHidden = true
        
        viewController.present(widget, animated: true) {
            viewController.isStatusBarHidden = false
        }
    }
    
    
    
    func extractionFinished() {
        guard let results = selphiWidget?.results else { return }
        guard let userImage = results.bestImage.image else { return }
        let templateSelfie = results.result.getTemplateRaw().base64EncodedString()
        let templateRostroSelfie = results.result.getTemplate().base64EncodedString()
        guard let selfie64 = userImage.jpegData(compressionQuality: 0.7)?.base64EncodedString() else { return }
        let selphiResult = SelphiModel.Response.SelphiResult(image: userImage, templateSelfie: templateSelfie, templateRostroSelfie: templateRostroSelfie, selfie64: selfie64)
        delegate?.returnData(selphiResult: selphiResult)
    }
    
    func extractionTimeout() {
        os_log("[Widget] - %s", log: .default, type: .debug, "Capture timedout")
    }
    
    func extractionCancelled() {
        os_log("[Widget] - %s", log: .default, type: .debug, "Capture cancelled")
    }
    
    func extractionFailed(_ error: Error!) {
        os_log("[Widget] - %s", log: .default, type: .debug, "Capture failed")
    }
    
    func isEqual(_ object: Any?) -> Bool {
        return true
    }
    
    var hash: Int = 0
    
    var superclass: AnyClass?
    
    func `self`() -> Self {
        return self
    }
    
    func perform(_ aSelector: Selector!) -> Unmanaged<AnyObject>! {
        return nil
    }
    
    func perform(_ aSelector: Selector!, with object: Any!) -> Unmanaged<AnyObject>! {
        return nil
    }
    
    func perform(_ aSelector: Selector!, with object1: Any!, with object2: Any!) -> Unmanaged<AnyObject>! {
        return nil
    }
    
    func isProxy() -> Bool {
        return true
    }
    
    func isKind(of aClass: AnyClass) -> Bool {
        return true
    }
    
    func isMember(of aClass: AnyClass) -> Bool {
        return true
    }
    
    func conforms(to aProtocol: Protocol) -> Bool {
        return true
    }
    
    func responds(to aSelector: Selector!) -> Bool {
        return true
    }
    
    var description: String = ""
     
}
