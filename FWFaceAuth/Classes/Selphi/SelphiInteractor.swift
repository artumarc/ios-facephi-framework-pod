//
//  UserPhotographInteractor.swift
//  FWFaceAuth
//
//  Created by Grecia Escárcega on 06/12/19.
//  Copyright (c) 2019 Grecia Escárcega. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelphiInteractorDelegate {
    func takePhotograph(request: SelphiModel.Request.Photo)
    func authenticate(request: FaceAuthModel.Request, token: String)
    func enroll(request: FaceAuthModel.Request, selphIDWidget: SelphIdModel.WidgetResult, token: String)
}

protocol SelphiDataStore {
    var authResult: Bool? { get }
    var selphiWidget: SelphiModel.Response.SelphiResult? { get }
    var idTransaction: String? { get }
}

class SelphiInteractor: SelphiInteractorDelegate, SelphiDataStore, SelphiWorkerDelegate {
    
    var selphiWidget: SelphiModel.Response.SelphiResult?
    var authResult: Bool?
    var idTransaction: String?
    var presenter: SelphiPresenterDelegate?
    var worker: SelphiWorker?
    var selphiResult: SelphiModel.Response.SelphiResult?
  
    func takePhotograph(request: SelphiModel.Request.Photo) {
        worker = SelphiWorker(delegate: self)
        worker?.showSelphIdWidget(liveness: request.liveness!, extraction: request.extraction!, viewController: request.viewController!)
    }
    
    func authenticate(request: FaceAuthModel.Request, token: String) {
        guard let imageData = self.selphiResult!.image.jpegData(compressionQuality: 0.95) else { return }
        
        let body: [String : Any] = [
            "template_rostro_selfie" : self.selphiResult!.templateRostroSelfie,
            //"proceso" : request.processID,
            //"subproceso" : request.subProcessID
        ]
        
        let data: [String: Data] = [
            "imagen_selfie": imageData
        ]
        
        let bodyData = Util.formDataBody(parameters: body, images: data)
        // MARK: - Debug section
        
        if Constants.Debug.active {
            let imagesBody = Util.debugImages(images: data)
            RequestDebug.post(images: imagesBody) { (response) in
                if let response = response {
                    
                    var originalBody = body
                    originalBody["imagen_selfie"] = response.imagen_selfie!
                    
                    let debugBodyRequest: [String: Any?] = [
                        "origen": Constants.Debug.origin,
                        "num_cuenta": Constants.Debug.client,
                        "curp": Constants.Debug.curp,
                        "json": originalBody,
                        "endpoint": Constants.url + "/grupo/1/autenticacion-universal/personas/\(request.curp)/factores/facial",
                        "image_selfie": response.imagen_selfie
                    ]
                    let debugData = try! JSONSerialization.data(withJSONObject: debugBodyRequest, options: [])
                    
                    
                    RequestDebug.post(request: debugData) { (result) in
                        if result {
                            Services.shared.authenticateOrEnroll(authenticate: true, token: token, curp: request.curp, body: bodyData) { (result, resultString, headers)  in
                                DispatchQueue.main.async {
                                    if(request.processID == 235){
                                        if result != nil {
                                            if result?.errorNegocio != nil &&
                                                (Constants.notValidateCurp || result?.errorNegocio?.codigo != 11) &&
                                                result?.errorNegocio?.codigo != 13 &&
                                                result?.errorNegocio?.codigo != 14 {
                                                self.authResult = true
                                            } else {
                                                self.authResult = result?.result
                                            }
                                        } else if resultString?.errorNegocio?.codigo == "12" {
                                            self.authResult = true
                                        } else if resultString?.errorNegocio?.codigo != nil {
                                            self.authResult = resultString?.result
                                        } else {
                                            self.authResult = nil
                                        }
                                        self.presenter?.performSegue()
                                    }
                                    // para codigos no 235
                                    else{
                                        self.authResult = result?.result
                                        self.presenter?.performSegue()
                                    }
                                }
//                                if let result = result {
//                                    if result.result == true || (result.errorNegocio != nil
//                                    && result.errorNegocio?.codigo != 11
//                                    && result.errorNegocio?.codigo != 13
//                                    && result.errorNegocio?.codigo != 14) {
//                                        self.authResult = true
//                                    } else {
//                                        self.authResult = false
//                                    }
//                                } else if resultString?.errorNegocio?.codigo == "12" {
//                                    self.authResult = true
//                                } else {
//                                    self.authResult = nil
//                                }
//                                DispatchQueue.main.async {
//                                    self.presenter?.performSegue()
//                                }
                            }
                        }
                    }
                }
            }
        } else {
            Services.shared.authenticateOrEnroll(authenticate: true, token: token, curp: request.curp, body: bodyData) { (result, resultString, headers)  in
//                   DispatchQueue.main.async {
//                    if let result = result {
//                            print("RESULTADO DEL SERVICIO RESULT /grupo/1/autenticacion-universal/personas/\(request.curp)/factores/facial \(result)")
//
//                           if result.result == true || (result.errorNegocio != nil
//                            && result.errorNegocio?.codigo != 11
//                            && result.errorNegocio?.codigo != 13
//                            && result.errorNegocio?.codigo != 14) {
//                               self.authResult = true
//                           } else {
//                               self.authResult = false
//                           }
//                       } else if resultString?.errorNegocio?.codigo == "12" {
//                        print("RESULTADO DEL SERVICIO RESULTSTRING /grupo/1/autenticacion-universal/personas/\(request.curp)/factores/facial \(resultString?.errorNegocio?.codigo ?? "") \(resultString?.errorNegocio?.detalle ?? "")")
//
//                           self.authResult = true
//                       } else {
//                            print("RESULTADO DEL SERVICIO NIL /grupo/1/autenticacion-universal/personas/\(request.curp)/factores/facial")
//
//                           self.authResult = nil
//                       }
//                       self.presenter?.performSegue()
//                   }
                DispatchQueue.main.async {
                    if(request.processID == 235){
                        if result != nil {
                            if result?.errorNegocio != nil &&
                                (Constants.notValidateCurp || result?.errorNegocio?.codigo != 11) &&
                                result?.errorNegocio?.codigo != 13 &&
                                result?.errorNegocio?.codigo != 14 {
                                self.authResult = true
                            } else {
                                self.authResult = result?.result
                            }
                        } else if resultString?.errorNegocio?.codigo == "12" {
                            self.authResult = true
                        } else if resultString?.errorNegocio?.codigo != nil {
                            self.authResult = resultString?.result
                        } else {
                            self.authResult = nil
                        }
                        self.presenter?.performSegue()
                    }
                    // para codigos no 235
                    else{
                        self.authResult = result?.result
                        self.presenter?.performSegue()
                    }
                }
               }
        }
        
    
    }
    
    func enroll(request: FaceAuthModel.Request, selphIDWidget: SelphIdModel.WidgetResult, token: String) {
        guard let userImageData = self.selphiResult!.image.jpegData(compressionQuality: 0.95) else { return }
        guard let idFront = selphIDWidget.frontImage.jpegData(compressionQuality: 0.80) else { return }
        let idBack = selphIDWidget.backImage?.jpegData(compressionQuality: 0.80)
        
        var body: [String : Any] = [
            "template_rostro_selfie" : self.selphiResult!.templateRostroSelfie,
            "template_selfie": self.selphiResult!.templateSelfie,
            "template_ine": selphIDWidget.tokenFaceImage,
            "selfie_base64": self.selphiResult!.selfie64,
            "token_ocr": selphIDWidget.tokenOCR,
            "id_cliente_buc": request.client,
            "proceso" : request.processID,
            "subproceso" : request.subProcessID,
            "id_origen": request.origen
        ]
        
        if let nombre = request.nombre {
            body["nombre"] = nombre
        }
        if let apellidoPaterno = request.apellidoPaterno {
            body["apellido_paterno"] = apellidoPaterno
        }
        if let apellidoMaterno = request.apellidoMaterno {
            body["apellido_materno"] = apellidoMaterno
        }
        
        let data: [String: Data?] = [
            "imagen_selfie": userImageData,
            "imagen_ine_frente": idFront,
            "imagen_ine_reverso": idBack
        ]
        
        let bodyData = Util.formDataBody(parameters: body, images: data)
        print("Selfie64 REQUEST *************************")
        print(self.selphiResult!.selfie64)
        
        // MARK: - Debug section
        
        if Constants.Debug.active {
            let imagesBody = Util.debugImages(images: data)
            
            RequestDebug.post(images: imagesBody) { (response) in
                if let response = response {
                    
                    var originalBody = body
                    originalBody["imagen_ine_frente"] = response.imagen_ine_frente!
                    originalBody["imagen_ine_reverso"] = response.imagen_ine_reverso!
                    originalBody["imagen_selfie"] = response.imagen_selfie!
                    
                    let debugBodyRequest: [String: Any?] = [
                        "origen": Constants.Debug.origin,
                        "num_cuenta": request.client,
                        "curp": request.curp,
                        "json": originalBody,
                        "endpoint": Constants.url + "/grupo/1/autenticacion-universal/personas/\(request.curp)/factores/facial",
                    ]
                    let debugData = try! JSONSerialization.data(withJSONObject: debugBodyRequest, options: [])

                    RequestDebug.post(request: debugData) { (result) in
                        if result {
                            Services.shared.authenticateOrEnroll(authenticate: false, token: token, curp: request.curp, body: bodyData) { (result, resultString, headers) in
                                
                                DispatchQueue.main.async {
                                    if(request.processID == 235){
                                        if result != nil {
                                            if result?.errorNegocio != nil &&
                                                (Constants.notValidateCurp || result?.errorNegocio?.codigo != 11) &&
                                                result?.errorNegocio?.codigo != 13 &&
                                                result?.errorNegocio?.codigo != 14 {
                                                self.authResult = true
                                            } else {
                                                self.authResult = result?.result
                                            }
                                        } else if resultString?.errorNegocio?.codigo == "12" {
                                            self.authResult = true
                                        } else if resultString?.errorNegocio?.codigo != nil {
                                            self.authResult = resultString?.result
                                        } else {
                                            self.authResult = nil
                                        }
                                        self.presenter?.performSegue()
                                    }
                                    // para codigos no 235
                                    else{
                                        self.authResult = result?.result
                                        self.presenter?.performSegue()
                                    }
                                }
//                                DispatchQueue.main.async {
//                                    if result != nil {
//                                        if result?.errorNegocio != nil &&
//                                            result?.errorNegocio?.codigo != 11 &&
//                                            result?.errorNegocio?.codigo != 13 &&
//                                            result?.errorNegocio?.codigo != 14 {
//                                            self.authResult = true
//                                        } else {
//                                            self.authResult = result?.result
//                                        }
//                                    } else if resultString?.errorNegocio?.codigo == "12" {
//                                        self.authResult = true
//                                    } else if resultString?.errorNegocio?.codigo != nil {
//                                        self.authResult = resultString?.result
//                                    } else {
//                                        self.authResult = nil
//                                    }
//                                    self.presenter?.performSegue()
//                                }
                            }
                        }
                    }
                }
            }
        } else {
            Services.shared.authenticateOrEnroll(authenticate: false, token: token, curp: request.curp, body: bodyData) { (result, resultString, headers) in
                
                if let idTransaction_ = headers?["x-request-id"] as? String {
                    self.idTransaction = idTransaction_
                }else{
                    self.idTransaction = ""
                }
                DispatchQueue.main.async {
                    if request.processID == 235 {
                        if result != nil {
                            if result?.errorNegocio != nil &&
                                (Constants.notValidateCurp || result?.errorNegocio?.codigo != 11) &&
                                result?.errorNegocio?.codigo != 13 &&
                                result?.errorNegocio?.codigo != 14 {
                                self.authResult = true
                            } else {
                                self.authResult = result?.result
                            }
                        } else if resultString?.errorNegocio?.codigo == "12" {
                            self.authResult = true
                        } else if resultString?.errorNegocio?.codigo != nil {
                            self.authResult = resultString?.result
                        } else {
                            self.authResult = nil
                        }
                        self.presenter?.performSegue()
                    }
                    else {
                        self.authResult = result?.result
                        self.presenter?.performSegue()
                    }
                }
                
//                if let result = result {
//                    if result.errorNegocio != nil &&
//                        (Constants.notValidateCurp || result.errorNegocio?.codigo != 11) &&
//                        result.errorNegocio?.codigo != 13 &&
//                        result.errorNegocio?.codigo != 14, request.processID == 235 {
//                        self.authResult = true
//                    } else {
//                        self.authResult = result.result
//                    }
//                } else if resultString?.errorNegocio?.codigo == "12", request.processID == 235 {
//                    self.authResult = true
//                } else {
//                    self.authResult = resultString?.result
//                }
//                DispatchQueue.main.async {
//                    self.presenter?.performSegue()
//                }
            }
        }
    }
    
    func returnData(selphiResult: SelphiModel.Response.SelphiResult) {
        self.selphiResult = selphiResult
        self.selphiWidget = selphiResult
        let response = SelphiModel.Response.Photo(userImage: selphiResult.image, firstViewSetup: false)
        presenter?.presentView(response: response)
    }
}
